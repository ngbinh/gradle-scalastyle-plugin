/*
 *    Copyright 2014. Binh Nguyen
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.3.1"
}

version = projectVersion
group = projectGroup

// Define projects
['2.10', '2.11', '2.12'].each { scalaVersion ->
    project(":gradle-scalastyle-plugin_$scalaVersion") {
        ext.scalaDist = scalaVersion
    }
}

ext {
    pluginSrc = "$rootDir/src"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

subprojects {
    apply plugin: "java"
    apply plugin: "scala"
    apply plugin: "groovy"
    apply plugin: 'signing' // For pushing to Sonatype OSS Staging repository
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    // JRE 1.6 should work
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    version = projectVersion
    group = projectGroup

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        compile gradleApi()
        compile localGroovy()

        compile "org.scalastyle:scalastyle_${scalaDist}:1.0.0"
        testCompile gradleTestKit()
        testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
            exclude module: 'groovy-all'
        }
        testCompile 'commons-io:commons-io:2.5'
    }

    sourceSets {
        main {
            scala {
                srcDirs = ["$pluginSrc/main/scala"]
            }
            groovy {
                srcDirs = ["$pluginSrc/main/groovy"]
                compileClasspath += files([sourceSets.main.scala.outputDir])
            }
            resources {
                srcDirs = ["$pluginSrc/main/resources"]
            }
        }
        test {
            groovy {
                srcDirs = ["$pluginSrc/test/groovy"]
            }
            resources {
                srcDirs = ["$pluginSrc/test/resources"]
            }
        }
    }

    test {
        dependsOn 'publishToMavenLocal'

        testLogging {
            showStandardStreams = true
        }
        systemProperty 'SCALA_VERSION', scalaDist
        systemProperty 'PLUGIN_VERSION', version
    }

    compileGroovy.dependsOn(compileScala)

    // Required for Sonatype
    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
        classifier "sources"
        extension "jar"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
        classifier "javadoc"
        extension "jar"
    }

  configurations.create("sources")
  configurations.create("javadoc")
  configurations.archives {
      extendsFrom configurations.sources
      extendsFrom configurations.javadoc
  }

    // Used for testing the plugin in a local project.
    task unversionedJar(type: Jar, dependsOn: 'jar') {
        version = null
        from sourceSets.main.output
    }

    task installPlugin(type: Copy, dependsOn: 'unversionedJar') {
        def gradleInstallDir = gradle.gradleHomeDir
        group = 'installation'
        description = 'Installs the plugin jar in your gradle distribution.'
        from "${buildDir}/libs/${unversionedJar.archiveName}"
        into "/${gradleInstallDir}/lib/plugins"
        doLast {
            println "Installed in: ${gradleInstallDir}/lib/plugins as: ${unversionedJar.archiveName}"
        }
    }

    task uninstallPlugin(type: Delete) {
        def gradleInstallDir = gradle.gradleHomeDir
        group = 'installation'
        description = 'Removes the plugin from your gradle distribution.'
        delete("/${gradleInstallDir}/lib/plugins/${unversionedJar.archiveName}")
    }

    artifacts {
        sources(sourcesJar) {
            type "jar"
        }
        javadoc(javadocJar) {
            type "javadoc"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = projectGroup

                artifact sourcesJar {
                    classifier "sources"
                }

                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintray_user') ? project.bintray_user : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintray_key') ? project.bintray_key : System.getenv('BINTRAY_API_KEY')

        publications = ['mavenJava']
        pkg {
            repo = 'maven'
            name = project.name
            desc = 'gradle-scalastyle is a Gradle plugin for running the Scalastyle style checker.'
            licenses = ['Apache-2.0']
            labels = [version]
            desc = 'Gradle plugin for scalaStyle'
            websiteUrl = projectHomepage
            issueTrackerUrl = 'https://github.com/ngbinh/gradle-scalastyle-plugin/issues'
            vcsUrl = 'https://github.com/ngbinh/gradle-scalastyle-plugin.git'
            licenses = ['Apache-2.0']
            publicDownloadNumbers = true
        }
    }
}
